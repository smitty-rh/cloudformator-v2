---
- hosts: localhost
  vars:
    ansible_python_interpreter: "/usr/libexec/platform-python"
  tasks:
    - name: Locating File
      find:
        paths: "/builds/cfme/{{ ystream }}/{{ version }}/"
        patterns: "cfme-rhevm*.qcow2"
      register: qcow2_image

    - name: Log into RHV
      ovirt_auth:
        url: "https://{{ myhost }}/ovirt-engine/api"
        insecure: true
        username: "{{ redhatID }}"
        password: "{{ redhatPass }}"
        state: present

    - name: Creating VM
      ovirt_vm:
        auth: "{{ ovirt_auth }}"
        state: present
        cluster: Default
        name: "{{ newvm }}"
        memory: "{{ memorySize }}"
        cpu_cores: 2
        cpu_sockets: 2
        type: server
        operating_system: rhel_7x64
        nics:
          - name: nic1
            profile_name: ovirtmgmt

    - name: Import QCOW2 to disk on RHV
      ovirt_disk:
        auth: "{{ ovirt_auth }}"
        name: "{{ newvm }}_Disk1"
        state: attached
        vm_name: "{{ newvm }}"
        interface: virtio
        size: 40GiB
        format: cow
        image_path: "{{ item.path }}"
        storage_domain: data
        bootable: True
      with_items: "{{ qcow2_image.files }}"

    - name: Adding DB Disk
      ovirt_disk:
        auth: "{{ ovirt_auth }}"
        name: "{{ newvm }}_DB"
        state: attached
        vm_name: "{{ newvm }}"
        interface: virtio
        size: 100GiB
        storage_domain: data

    - name: Powering on Appliance
      ovirt_vm:
        auth: "{{ ovirt_auth }}"
        name: "{{ newvm }}"
        state: running
        wait: yes

    - pause:
        minutes: 5

    - name: Gathering IP Info
      ovirt_nic:
        auth: "{{ ovirt_auth }}"
        vm: "{{ newvm }}"
        name: nic1
      register: IPInfo

    - name: Gathering facts of appliance
      setup:
      register: moreInfo
      delegate_to: '{{ IPInfo.nic.reported_devices[0].ips[0].address }}'

    - name: Figure out which is the DB Disk
      set_fact:
        db_disk: "{{ item.key }}"
      with_dict: "{{ ansible_devices }}"
      when: item.value.size == '100.00 GB'

    - name: Setting up DB on '{{ db_disk }}'
      shell: appliance_console_cli --internal --dbdisk /dev/"{{ db_disk }}" --region 0 --password "{{ cfme_password }}"
      delegate_to: '{{ IPInfo.nic.reported_devices[0].ips[0].address }}'
      when: ystream != '5.10'

    - name: Setting up DB on '{{ db_disk }} (for 5.10)
      shell: appliance_console_cli --internal --dbdisk /dev/"{{ db_disk }}" --region 10 --password "{{ cfme_password }}"
      delegate_to: '{{ IPInfo.nic.reported_devices[0].ips[0].address }}'
      when: ystream == '5.10'

      #    - name: Setting up DB on vdb
      #      shell: appliance_console_cli --internal --dbdisk /dev/vdb --region 0 --password "{{ cfme_password }}"
      #      delegate_to: '{{ IPInfo.nic.reported_devices[0].ips[0].address }}'
      #      when: moreInfo.ansible_facts.ansible_devices.vda.size != '100.00 GB' and ystream != '5.10'

      #    - name: Setting up DB on vda
      #      shell: appliance_console_cli --internal --dbdisk /dev/vda --region 0 --password "{{ cfme_password }}"
      #      delegate_to: '{{ IPInfo.nic.reported_devices[0].ips[0].address }}'
      #      when: moreInfo.ansible_facts.ansible_devices.vdb.size != '100.00 GB' and ystream != '5.10'

      #    - name: Setting up DB on vdb
      #      shell: appliance_console_cli --internal --dbdisk /dev/vdb --region 0 --password "{{ cfme_password }}"
      #      delegate_to: '{{ IPInfo.nic.reported_devices[0].ips[0].address }}'
      #      when: moreInfo.ansible_facts.ansible_devices.vda.size != '100.00 GB' and ystream == '5.10'

      #    - name: Setting up DB on vda
      #      shell: appliance_console_cli --internal --dbdisk /dev/vda --region 0 --password "{{ cfme_password }}"
      #      delegate_to: '{{ IPInfo.nic.reported_devices[0].ips[0].address }}'
      #      when: moreInfo.ansible_facts.ansible_devices.vdb.size != '100.00 GB' and ystream == '5.10'

    - name: Copy DB Import Script (for 5.9)
      copy:
        src: importdb46.sh
        dest: /tmp/importdb.sh
        mode: u+x
      delegate_to: '{{ IPInfo.nic.reported_devices[0].ips[0].address }}'
      when: setup_DB == 'true' and ystream == '5.9'

    - name: Copy DB Import Script (for 5.10)
      copy:
        src: importdb47.sh
        dest: /tmp/importdb.sh
        mode: u+x
      delegate_to: '{{ IPInfo.nic.reported_devices[0].ips[0].address }}'
      when: setup_DB == 'true' and ystream == '5.10'

    - name: Run DB Import Script
      shell: /tmp/importdb.sh
      delegate_to: '{{ IPInfo.nic.reported_devices[0].ips[0].address }}' 
      when: setup_DB == 'true'

    - name: Starting EVM service manually
      shell: systemctl start evmserverd.service
      delegate_to: '{{ IPInfo.nic.reported_devices[0].ips[0].address }}'
      when: setup_DB != 'true'

    - debug: 
        msg: "You should now be able to access your appliance via https://{{ IPInfo.nic.reported_devices[0].ips[0].address }} Please allow roughly 15 minutes for the service to fully come online."

    - name: Build body for Cloudforms
      set_fact:
        payload:
          action: add_provider_vms
          resource:
            provider:
              href: "{{ manageiq.api_url }}/api/{{ provider_href_slug }}"
            uid_ems:
              - "{{ IPInfo.nic.vm.id }}"
    - debug: msg="payload = {{ payload }}"

    - name: Register Vm with Cloudforms
      uri:
        url: "{{ manageiq.api_url }}/api/{{ manageiq.service }}"
        method: POST
        body:  "{{ payload }}"
        body_format: json
        validate_certs: False
        user: "{{ cfme_userid }}"
        password: "{{ cfme_password }}"
        headers:
          Content-Type: "application/json"
        status_code: 200
      register: output

    - debug: var=output.json.success

    - name: Check if the VM was successfully attached to service
      fail: msg="{{ output.json.message }}"
      when: output.json.success == false
